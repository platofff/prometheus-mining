#!/bin/bash
: '
prometheus-mining - Prometheus exporter for some mining software
Copyright (C) 2020-2021 platofff

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
'

trm() {
        local resp=( `echo -n '{"command":"summary+gpucount"}' | nc -w 10 $1 $2 | jq '.summary.SUMMARY[0].Elapsed // empty, .gpucount.GPUS[0].Count // empty'` )
        local uptime=${resp[0]}
        local count=${resp[1]}
        [ "${#resp[@]}" -eq 2 ] || return -1
        local result=()
        for (( i=0; i<$count; i++ ))
        do
                local gpu=( `echo -n '{"command":"gpu","parameter":"'$i'"}' | nc -w 2 $1 $2 | jq '.GPU[0] | .Accepted // empty, .Rejected // empty, .Temperature // empty, ."Fan Percent" // empty, ."MHS 30s" // empty, ."Hardware Errors" // empty'` )
                local l="{gpu=\"$i\" host=\"$1:$2\"}"
                [ "${#gpu[@]}" -eq 6 ] || return -1
                result+=( "accepted$l ${gpu[0]}" "rejected$l ${gpu[1]}" "temperature$l ${gpu[2]}" "fan$l ${gpu[3]}" "hashrate$l ${gpu[4]}" "hw$l ${gpu[5]}" )
        done
        printf '%s\n' "${result[@]}"
        echo "uptime{host=\"$1:$2\"} $uptime"
}

t-rex() {
	local resp=`curl -s http://$1:$2/summary --max-time 10 || return -1`
	local tmp=( `jq '.uptime // empty, .gpu_total // empty' <<< $resp` )
	[ "${#tmp[@]}" -eq 2 ] || return -1
	local uptime=${tmp[0]}
	local count=${tmp[1]}
	local stats=( `jq '.gpus[] | .gpu_id // empty, .fan_speed // empty, .temperature // empty, .hashrate_minute // empty, .shares.accepted_count // empty, .shares.invalid_count // empty, .shares.rejected_count // empty' <<< $resp` )
	[ "$(( ${#stats[@]} / count ))" -eq 7 ] || return -1
	while [ "${#stats[@]}" -ne 0 ]
        do
                local gpu=( "${stats[@]:0:7}" )
                local l="{gpu=\"${gpu[0]}\" host=\"$1:$2\"}"
                echo "accepted$l ${gpu[4]}
hw$l ${gpu[5]}
rejected$l ${gpu[6]}
temperature$l ${gpu[2]}
fan$l ${gpu[1]}
hashrate$l $(sed 's/..$/.&/' <<< $(( ${gpu[3]} / 10000 )))"
                stats=( "${stats[@]:7}" )
	done
	echo "uptime{host=\"$1:$2\"} $uptime"
}

lolminer() {
	local resp=`curl -s http://$1:$2/summary --max-time 10 || return -1`
	local stats=( `jq -r '.Workers[] | [.Index, .Fan_Speed, .Core_Temp] | @tsv' <<< $resp` )
	local performance=( `jq -r '.Algorithms[] | select(.Algorithm=="Ethash") | [.Worker_Performance, .Worker_Accepted, .Worker_Rejected, .Worker_Errors] | transpose | .[] | @tsv' <<< $resp` )
	local uptime=`jq '.Session | .Uptime' <<< $resp`
	[ -z "$stats" ] && return -1
	echo "uptime{host=\"$1:$2\"} $uptime"

	while [ "$stats" != "" ]
	do
		local gpu=( "${stats[@]:0:3}" "${performance[@]:0:4}" )
		local l="{gpu=\"${gpu[0]}\" host=\"$1:$2\"}"
		echo "accepted$l ${gpu[4]}
temperature$l ${gpu[2]}
fan$l ${gpu[1]}
hashrate$l ${gpu[3]}
hw$l ${gpu[6]}
rejected$l ${gpu[5]}"
		local stats=( "${stats[@]:3}" )
		local performance=( "${stats[@]:4}" )
	done
}

ethman() {
	local stats
	readarray -t stats < <(echo '{"method": "miner_getstat1", "jsonrpc": "2.0", "id": 0 }' | nc -w 10 $1 $2 | jq -c '.result[]' | sed 's/\"//g; s/\;/ /g')
	local hashrate=( ${stats[3]} )
	local shares=( ${stats[2]} )
	local tempfan=( ${stats[6]} )
	[ -z "${shares[1]}" ] && return -1

	echo "uptime{host=\"$1:$2\"} $(( stats[1] * 60 ))
accepted{host=\"$1:$2\"} ${shares[1]}
rejected{host=\"$1:$2\"} ${shares[2]}"
	for (( i = 0; i < ${#hashrate[@]}; i++ ))
	do
		local l="{gpu=\"$i\" host=\"$1:$2\"}"
		local temp=$(( i / 2 ))
		local fan=$(( temp + 1 ))
		echo "temperature$l ${tempfan[$temp]}
fan$l ${tempfan[$fan]}
hashrate$l $(sed 's/....$//; s/..$/.&/' <<< ${hashrate[$i]})"
	done
}

nvminer() {
	local resp=$(curl -s http://$1:$2 --max-time 10 || return -1)
	local uptime=`jq '.uptime' <<< $resp | sed 's/\"//g; s/.$//'`
	[ -z "$uptime" ] && return -1
	[ "$uptime" == "0" ] && uptime=1

	echo "uptime{host=\"$1:$2\"} $(( uptime * 3600 ))"
	local stats
	readarray -t stats < <(jq -r '.devices[] | [.hashrate, .fan, .temperature] | @tsv' <<< $resp)
	for (( i = 0; i < ${#stats[@]}; i++ ))
	do
                local gpu=( ${stats[$i]} )
                [ "${#gpu[@]}" != "3" ] && continue
		local l="{gpu=\"$i\" host=\"$1:$2\"}"
		echo "temperature$l ${gpu[2]}
fan$l ${gpu[1]}
hashrate$l ${gpu[0]}
accepted$l 0
rejected $l 0"
	done
}

source ../config
RIGS=( `sed 's/=.*//g' ../config` )

echo 'Content-type: text/plain; version=0.0.4'
echo ''
echo '# TYPE accepted counter
# TYPE rejected counter
# TYPE temperature gauge
# TYPE fan gauge
# TYPE hashrate summary
# TYPE hw counter
# TYPE uptime gauge'

for rig in "${RIGS[@]}"
do
        command=$rig[@]
        ${!command} ||
        (
                rig=( ${!command} )
                l="{gpu=\"0\" host=\"${rig[1]}:${rig[2]}\"}"
                echo "uptime{host=\"${rig[1]}:${rig[2]}\"} 0
accepted$l 0
temperature$l 0
fan$l 0
hashrate$l 0
hw$l 0
rejected$l 0"
        )
done
